// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: 4V9pJe2SUwNn
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopBar from "../../TopBar"; // plasmic-import: nsqmq6QdR8/component
import SettingsButton from "../../SettingsButton"; // plasmic-import: 5o0BGUmfu3/component
import WeatherWidget from "../../WeatherWidget"; // plasmic-import: 0-CIISOwT0/component
import HeatContolWidget from "../../HeatContolWidget"; // plasmic-import: aoIUbV_IZ6/component
import Note from "../../Note"; // plasmic-import: aWZ5Rm1too/component
import RecordingBtnWidget from "../../RecordingBtnWidget"; // plasmic-import: g8sFvLHOQr/component
import FavouritesBtn from "../../FavouritesBtn"; // plasmic-import: eZM_gBMn2w/component
import NavBar from "../../NavBar"; // plasmic-import: jXKRlC2FpR/component
import DateTimeWidget from "../../DateTimeWidget"; // plasmic-import: PKQxjs1wgm/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 4V9pJe2SUwNn/css

import Group6Icon from "./icons/PlasmicIcon__Group6"; // plasmic-import: RrnStGHaMH_/icon
import IconSadIcon from "./icons/PlasmicIcon__IconSad"; // plasmic-import: LSRU8DOeASe/icon
import IconLightsIcon from "./icons/PlasmicIcon__IconLights"; // plasmic-import: iMhy_reGSmx/icon
import IconHeartIcon from "./icons/PlasmicIcon__IconHeart"; // plasmic-import: Jz_s8Wvzgq/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: zT1yyLrytDX/icon
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: zsir4Dm1UbC/icon
import IconOutIcon from "./icons/PlasmicIcon__IconOut"; // plasmic-import: YJSks7-cKx/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: 4WXBfYFgy/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  topBar?: p.Flex<typeof TopBar>;
  weatherWidget?: p.Flex<typeof WeatherWidget>;
  heatContolWidget?: p.Flex<typeof HeatContolWidget>;
  recordingBtnWidget?: p.Flex<typeof RecordingBtnWidget>;
  tryby2?: p.Flex<"div">;
  favouritesBtn?: p.Flex<typeof FavouritesBtn>;
  ulubione?: p.Flex<"div">;
  rectangle28?: p.Flex<"div">;
  dzien5?: p.Flex<"div">;
  dzien?: p.Flex<"div">;
  rectangle24?: p.Flex<"div">;
  iconSun?: p.Flex<"div">;
  noc?: p.Flex<"div">;
  rectangle25?: p.Flex<"div">;
  dzien2?: p.Flex<"div">;
  iconNight?: p.Flex<"div">;
  pozaDomem?: p.Flex<"div">;
  rectangle26?: p.Flex<"div">;
  dzien3?: p.Flex<"div">;
  przywolajWinde?: p.Flex<"div">;
  rectangle29?: p.Flex<"div">;
  iconLift?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  dateTimeWidget?: p.Flex<typeof DateTimeWidget>;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}
      {}
      {true ? (
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__p2DhG)}>
            <TopBar
              data-plasmic-name={"topBar"}
              data-plasmic-override={overrides.topBar}
              className={classNames("__wab_instance", sty.topBar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__fv9V)}>
              <WeatherWidget
                data-plasmic-name={"weatherWidget"}
                data-plasmic-override={overrides.weatherWidget}
                airQuality={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iyzB
                    )}
                  >
                    {"PM2.5"}
                  </div>
                }
                className={classNames("__wab_instance", sty.weatherWidget)}
                online={true}
                temperature={"12°C"}
              />

              <HeatContolWidget
                data-plasmic-name={"heatContolWidget"}
                data-plasmic-override={overrides.heatContolWidget}
                className={classNames("__wab_instance", sty.heatContolWidget)}
              />
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__jmF3N)}>
              <Note className={classNames("__wab_instance", sty.note__cNo)} />

              <RecordingBtnWidget
                data-plasmic-name={"recordingBtnWidget"}
                data-plasmic-override={overrides.recordingBtnWidget}
                className={classNames("__wab_instance", sty.recordingBtnWidget)}
              />
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__aEu7S)}>
                <Note
                  className={classNames("__wab_instance", sty.note__lgLxn)}
                />
              </div>
            ) : null}

            <div
              data-plasmic-name={"tryby2"}
              data-plasmic-override={overrides.tryby2}
              className={classNames(projectcss.all, sty.tryby2)}
            >
              <FavouritesBtn
                data-plasmic-name={"favouritesBtn"}
                data-plasmic-override={overrides.favouritesBtn}
                className={classNames("__wab_instance", sty.favouritesBtn)}
              />

              <div
                data-plasmic-name={"ulubione"}
                data-plasmic-override={overrides.ulubione}
                className={classNames(projectcss.all, sty.ulubione)}
              >
                <div
                  data-plasmic-name={"rectangle28"}
                  data-plasmic-override={overrides.rectangle28}
                  className={classNames(projectcss.all, sty.rectangle28)}
                />

                <div
                  data-plasmic-name={"dzien5"}
                  data-plasmic-override={overrides.dzien5}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.dzien5
                  )}
                >
                  {"Ulubione"}
                </div>

                <IconHeartIcon
                  className={classNames(projectcss.all, sty.svg__mnpYt)}
                  role={"img"}
                />
              </div>

              <div
                data-plasmic-name={"dzien"}
                data-plasmic-override={overrides.dzien}
                className={classNames(projectcss.all, sty.dzien)}
              >
                <div
                  data-plasmic-name={"rectangle24"}
                  data-plasmic-override={overrides.rectangle24}
                  className={classNames(projectcss.all, sty.rectangle24)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i15Ui
                  )}
                >
                  {"Dzień"}
                </div>

                <div
                  data-plasmic-name={"iconSun"}
                  data-plasmic-override={overrides.iconSun}
                  className={classNames(projectcss.all, sty.iconSun)}
                >
                  <GroupIcon
                    className={classNames(projectcss.all, sty.svg__ld8Dl)}
                    role={"img"}
                  />
                </div>
              </div>

              <div
                data-plasmic-name={"noc"}
                data-plasmic-override={overrides.noc}
                className={classNames(projectcss.all, sty.noc)}
              >
                <div
                  data-plasmic-name={"rectangle25"}
                  data-plasmic-override={overrides.rectangle25}
                  className={classNames(projectcss.all, sty.rectangle25)}
                />

                <div
                  data-plasmic-name={"dzien2"}
                  data-plasmic-override={overrides.dzien2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.dzien2
                  )}
                >
                  {"Noc"}
                </div>

                <div
                  data-plasmic-name={"iconNight"}
                  data-plasmic-override={overrides.iconNight}
                  className={classNames(projectcss.all, sty.iconNight)}
                >
                  <Group2Icon
                    className={classNames(projectcss.all, sty.svg__rOqIn)}
                    role={"img"}
                  />
                </div>
              </div>

              <div
                data-plasmic-name={"pozaDomem"}
                data-plasmic-override={overrides.pozaDomem}
                className={classNames(projectcss.all, sty.pozaDomem)}
              >
                <div
                  data-plasmic-name={"rectangle26"}
                  data-plasmic-override={overrides.rectangle26}
                  className={classNames(projectcss.all, sty.rectangle26)}
                />

                <div
                  data-plasmic-name={"dzien3"}
                  data-plasmic-override={overrides.dzien3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.dzien3
                  )}
                >
                  {"Poza domem"}
                </div>

                <IconOutIcon
                  className={classNames(projectcss.all, sty.svg___2W7Xx)}
                  role={"img"}
                />
              </div>

              <div
                data-plasmic-name={"przywolajWinde"}
                data-plasmic-override={overrides.przywolajWinde}
                className={classNames(projectcss.all, sty.przywolajWinde)}
              >
                <div
                  data-plasmic-name={"rectangle29"}
                  data-plasmic-override={overrides.rectangle29}
                  className={classNames(projectcss.all, sty.rectangle29)}
                />

                <div
                  data-plasmic-name={"iconLift"}
                  data-plasmic-override={overrides.iconLift}
                  className={classNames(projectcss.all, sty.iconLift)}
                >
                  <Group3Icon
                    className={classNames(projectcss.all, sty.svg__thxC2)}
                    role={"img"}
                  />
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3ZrSz
                  )}
                >
                  {"Przywołaj\nwindę"}
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___4R2Vh)}>
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />
            </div>
          </div>

          <DateTimeWidget
            data-plasmic-name={"dateTimeWidget"}
            data-plasmic-override={overrides.dateTimeWidget}
            className={classNames("__wab_instance", sty.dateTimeWidget)}
            dateText={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ssssr
                )}
              >
                {"Poniedziałek\n30 październik 2022"}
              </div>
            }
            timeText={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uGvd8
                )}
              >
                {"14:22"}
              </div>
            }
          />
        </div>
      ) : null}
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "weatherWidget",
    "heatContolWidget",
    "recordingBtnWidget",
    "tryby2",
    "favouritesBtn",
    "ulubione",
    "rectangle28",
    "dzien5",
    "dzien",
    "rectangle24",
    "iconSun",
    "noc",
    "rectangle25",
    "dzien2",
    "iconNight",
    "pozaDomem",
    "rectangle26",
    "dzien3",
    "przywolajWinde",
    "rectangle29",
    "iconLift",
    "navBar",
    "dateTimeWidget"
  ],
  topBar: ["topBar"],
  weatherWidget: ["weatherWidget"],
  heatContolWidget: ["heatContolWidget"],
  recordingBtnWidget: ["recordingBtnWidget"],
  tryby2: [
    "tryby2",
    "favouritesBtn",
    "ulubione",
    "rectangle28",
    "dzien5",
    "dzien",
    "rectangle24",
    "iconSun",
    "noc",
    "rectangle25",
    "dzien2",
    "iconNight",
    "pozaDomem",
    "rectangle26",
    "dzien3",
    "przywolajWinde",
    "rectangle29",
    "iconLift"
  ],
  favouritesBtn: ["favouritesBtn"],
  ulubione: ["ulubione", "rectangle28", "dzien5"],
  rectangle28: ["rectangle28"],
  dzien5: ["dzien5"],
  dzien: ["dzien", "rectangle24", "iconSun"],
  rectangle24: ["rectangle24"],
  iconSun: ["iconSun"],
  noc: ["noc", "rectangle25", "dzien2", "iconNight"],
  rectangle25: ["rectangle25"],
  dzien2: ["dzien2"],
  iconNight: ["iconNight"],
  pozaDomem: ["pozaDomem", "rectangle26", "dzien3"],
  rectangle26: ["rectangle26"],
  dzien3: ["dzien3"],
  przywolajWinde: ["przywolajWinde", "rectangle29", "iconLift"],
  rectangle29: ["rectangle29"],
  iconLift: ["iconLift"],
  navBar: ["navBar"],
  dateTimeWidget: ["dateTimeWidget"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  topBar: typeof TopBar;
  weatherWidget: typeof WeatherWidget;
  heatContolWidget: typeof HeatContolWidget;
  recordingBtnWidget: typeof RecordingBtnWidget;
  tryby2: "div";
  favouritesBtn: typeof FavouritesBtn;
  ulubione: "div";
  rectangle28: "div";
  dzien5: "div";
  dzien: "div";
  rectangle24: "div";
  iconSun: "div";
  noc: "div";
  rectangle25: "div";
  dzien2: "div";
  iconNight: "div";
  pozaDomem: "div";
  rectangle26: "div";
  dzien3: "div";
  przywolajWinde: "div";
  rectangle29: "div";
  iconLift: "div";
  navBar: typeof NavBar;
  dateTimeWidget: typeof DateTimeWidget;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    weatherWidget: makeNodeComponent("weatherWidget"),
    heatContolWidget: makeNodeComponent("heatContolWidget"),
    recordingBtnWidget: makeNodeComponent("recordingBtnWidget"),
    tryby2: makeNodeComponent("tryby2"),
    favouritesBtn: makeNodeComponent("favouritesBtn"),
    ulubione: makeNodeComponent("ulubione"),
    rectangle28: makeNodeComponent("rectangle28"),
    dzien5: makeNodeComponent("dzien5"),
    dzien: makeNodeComponent("dzien"),
    rectangle24: makeNodeComponent("rectangle24"),
    iconSun: makeNodeComponent("iconSun"),
    noc: makeNodeComponent("noc"),
    rectangle25: makeNodeComponent("rectangle25"),
    dzien2: makeNodeComponent("dzien2"),
    iconNight: makeNodeComponent("iconNight"),
    pozaDomem: makeNodeComponent("pozaDomem"),
    rectangle26: makeNodeComponent("rectangle26"),
    dzien3: makeNodeComponent("dzien3"),
    przywolajWinde: makeNodeComponent("przywolajWinde"),
    rectangle29: makeNodeComponent("rectangle29"),
    iconLift: makeNodeComponent("iconLift"),
    navBar: makeNodeComponent("navBar"),
    dateTimeWidget: makeNodeComponent("dateTimeWidget"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
