// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: nsqmq6QdR8
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicTopBar.module.css"; // plasmic-import: nsqmq6QdR8/css

import IconWifiIcon from "./icons/PlasmicIcon__IconWifi"; // plasmic-import: yUaWBRXGAT/icon
import Group39518Icon from "./icons/PlasmicIcon__Group39518"; // plasmic-import: QPyex1i8q_l/icon
import IconSettings2Icon from "./icons/PlasmicIcon__IconSettings2"; // plasmic-import: yyLUYFhoyS4/icon
import IconWifi2Icon from "./icons/PlasmicIcon__IconWifi2"; // plasmic-import: xX_5xOFSAF/icon

export type PlasmicTopBar__VariantMembers = {
  colapsed: "colapsed";
};

export type PlasmicTopBar__VariantsArgs = {
  colapsed?: SingleBooleanChoiceArg<"colapsed">;
};

type VariantPropType = keyof PlasmicTopBar__VariantsArgs;
export const PlasmicTopBar__VariantProps = new Array<VariantPropType>(
  "colapsed"
);

export type PlasmicTopBar__ArgsType = {};
type ArgPropType = keyof PlasmicTopBar__ArgsType;
export const PlasmicTopBar__ArgProps = new Array<ArgPropType>();

export type PlasmicTopBar__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  frame3868?: p.Flex<"div">;
  group39512?: p.Flex<"div">;
  barTop?: p.Flex<"div">;
};

export interface DefaultTopBarProps {
  colapsed?: SingleBooleanChoiceArg<"colapsed">;
  className?: string;
}

export const defaultTopBar__Args: Partial<PlasmicTopBar__ArgsType> = {};

function PlasmicTopBar__RenderFunc(props: {
  variants: PlasmicTopBar__VariantsArgs;
  args: PlasmicTopBar__ArgsType;
  overrides: PlasmicTopBar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultTopBar__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.rootcolapsed]: hasVariant(variants, "colapsed", "colapsed") }
      )}
    >
      {(hasVariant(variants, "colapsed", "colapsed") ? true : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxcolapsed]: hasVariant(variants, "colapsed", "colapsed")
          })}
        >
          {(hasVariant(variants, "colapsed", "colapsed") ? true : true) ? (
            <IconWifiIcon
              className={classNames(projectcss.all, sty.svg__gp6MC, {
                [sty.svgcolapsed__gp6MCfwsv]: hasVariant(
                  variants,
                  "colapsed",
                  "colapsed"
                )
              })}
              role={"img"}
            />
          ) : null}
          {(hasVariant(variants, "colapsed", "colapsed") ? true : true) ? (
            <div
              data-plasmic-name={"frame3868"}
              data-plasmic-override={overrides.frame3868}
              className={classNames(projectcss.all, sty.frame3868, {
                [sty.frame3868colapsed]: hasVariant(
                  variants,
                  "colapsed",
                  "colapsed"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__al0UB
                )}
              >
                {"Logo dewelopera"}
              </div>

              <div
                data-plasmic-name={"group39512"}
                data-plasmic-override={overrides.group39512}
                className={classNames(projectcss.all, sty.group39512)}
              >
                <Group39518Icon
                  className={classNames(projectcss.all, sty.svg__eJFhb)}
                  role={"img"}
                />
              </div>
            </div>
          ) : null}
          {(hasVariant(variants, "colapsed", "colapsed") ? true : true) ? (
            <IconSettings2Icon
              className={classNames(projectcss.all, sty.svg__vzsyi, {
                [sty.svgcolapsed__vzsyiFwsv]: hasVariant(
                  variants,
                  "colapsed",
                  "colapsed"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>
      ) : null}
      {(hasVariant(variants, "colapsed", "colapsed") ? true : false) ? (
        <div
          data-plasmic-name={"barTop"}
          data-plasmic-override={overrides.barTop}
          className={classNames(projectcss.all, sty.barTop, {
            [sty.barTopcolapsed]: hasVariant(variants, "colapsed", "colapsed")
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bywJ1
            )}
          >
            {"czwartek, 3 luty"}
          </div>

          {true ? (
            <IconWifi2Icon
              className={classNames(projectcss.all, sty.svg__meDbW)}
              role={"img"}
            />
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4WEoE
            )}
          >
            {"12:00"}
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "frame3868", "group39512", "barTop"],
  freeBox: ["freeBox", "frame3868", "group39512"],
  frame3868: ["frame3868", "group39512"],
  group39512: ["group39512"],
  barTop: ["barTop"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  frame3868: "div";
  group39512: "div";
  barTop: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTopBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTopBar__VariantsArgs;
    args?: PlasmicTopBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTopBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTopBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTopBar__ArgProps,
      internalVariantPropNames: PlasmicTopBar__VariantProps
    });

    return PlasmicTopBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTopBar";
  } else {
    func.displayName = `PlasmicTopBar.${nodeName}`;
  }
  return func;
}

export const PlasmicTopBar = Object.assign(
  // Top-level PlasmicTopBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    frame3868: makeNodeComponent("frame3868"),
    group39512: makeNodeComponent("group39512"),
    barTop: makeNodeComponent("barTop"),

    // Metadata about props expected for PlasmicTopBar
    internalVariantProps: PlasmicTopBar__VariantProps,
    internalArgProps: PlasmicTopBar__ArgProps
  }
);

export default PlasmicTopBar;
/* prettier-ignore-end */
