// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: eZM_gBMn2w
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: eZM_gBMn2w/css

import IconLightsIcon from "./icons/PlasmicIcon__IconLights"; // plasmic-import: iMhy_reGSmx/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: zT1yyLrytDX/icon

export type PlasmicButton__VariantMembers = {};

export type PlasmicButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>();

export type PlasmicButton__ArgsType = {};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>();

export type PlasmicButton__OverridesType = {
  root?: p.Flex<"div">;
  rectangle27?: p.Flex<"div">;
  dzien4?: p.Flex<"div">;
  dzien?: p.Flex<"div">;
  rectangle24?: p.Flex<"div">;
  text?: p.Flex<"div">;
  iconSun?: p.Flex<"div">;
};

export interface DefaultButtonProps {
  className?: string;
}

export const defaultButton__Args: Partial<PlasmicButton__ArgsType> = {};

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultButton__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    active_root: isRootActive
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootActiveProps]}
    >
      <div
        data-plasmic-name={"rectangle27"}
        data-plasmic-override={overrides.rectangle27}
        className={classNames(projectcss.all, sty.rectangle27)}
      />

      <div
        data-plasmic-name={"dzien4"}
        data-plasmic-override={overrides.dzien4}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.dzien4
        )}
      >
        {"Światła"}
      </div>

      <IconLightsIcon
        className={classNames(projectcss.all, sty.svg__o55Se)}
        role={"img"}
      />

      {(triggers.active_root ? true : false) ? (
        <div
          data-plasmic-name={"dzien"}
          data-plasmic-override={overrides.dzien}
          className={classNames(projectcss.all, sty.dzien)}
        >
          <div
            data-plasmic-name={"rectangle24"}
            data-plasmic-override={overrides.rectangle24}
            className={classNames(projectcss.all, sty.rectangle24)}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Dzień"}
          </div>

          <div
            data-plasmic-name={"iconSun"}
            data-plasmic-override={overrides.iconSun}
            className={classNames(projectcss.all, sty.iconSun)}
          >
            <GroupIcon
              className={classNames(projectcss.all, sty.svg__a4UXa)}
              role={"img"}
            />
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "rectangle27",
    "dzien4",
    "dzien",
    "rectangle24",
    "text",
    "iconSun"
  ],
  rectangle27: ["rectangle27"],
  dzien4: ["dzien4"],
  dzien: ["dzien", "rectangle24", "text", "iconSun"],
  rectangle24: ["rectangle24"],
  text: ["text"],
  iconSun: ["iconSun"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rectangle27: "div";
  dzien4: "div";
  dzien: "div";
  rectangle24: "div";
  text: "div";
  iconSun: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rectangle27: makeNodeComponent("rectangle27"),
    dzien4: makeNodeComponent("dzien4"),
    dzien: makeNodeComponent("dzien"),
    rectangle24: makeNodeComponent("rectangle24"),
    text: makeNodeComponent("text"),
    iconSun: makeNodeComponent("iconSun"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
