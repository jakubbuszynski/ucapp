// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: 0-CIISOwT0
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicWeatherWidget.module.css"; // plasmic-import: 0-CIISOwT0/css

import IconArrowIcon from "./icons/PlasmicIcon__IconArrow"; // plasmic-import: -qhDoMlgc3n/icon
import Group7Icon from "./icons/PlasmicIcon__Group7"; // plasmic-import: RfKpJouolhJ/icon
import Vector107Icon from "./icons/PlasmicIcon__Vector107"; // plasmic-import: ryaI8VyotDd/icon
import Group6Icon from "./icons/PlasmicIcon__Group6"; // plasmic-import: RrnStGHaMH_/icon
import IconSadIcon from "./icons/PlasmicIcon__IconSad"; // plasmic-import: LSRU8DOeASe/icon

export type PlasmicWeatherWidget__VariantMembers = {
  online: "online";
};

export type PlasmicWeatherWidget__VariantsArgs = {
  online?: SingleBooleanChoiceArg<"online">;
};

type VariantPropType = keyof PlasmicWeatherWidget__VariantsArgs;
export const PlasmicWeatherWidget__VariantProps = new Array<VariantPropType>(
  "online"
);

export type PlasmicWeatherWidget__ArgsType = {
  airQuality?: React.ReactNode;
  temperature?: React.ReactNode;
  weatherIcon?: React.ReactNode;
  airQualityIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicWeatherWidget__ArgsType;
export const PlasmicWeatherWidget__ArgProps = new Array<ArgPropType>(
  "airQuality",
  "temperature",
  "weatherIcon",
  "airQualityIcon"
);

export type PlasmicWeatherWidget__OverridesType = {
  root?: p.Flex<"div">;
  rectangle19?: p.Flex<"div">;
  texticon?: p.Flex<"div">;
  iconWeather?: p.Flex<"div">;
  weather?: p.Flex<"div">;
  iconWeather2?: p.Flex<"div">;
};

export interface DefaultWeatherWidgetProps {
  airQuality?: React.ReactNode;
  temperature?: React.ReactNode;
  weatherIcon?: React.ReactNode;
  airQualityIcon?: React.ReactNode;
  online?: SingleBooleanChoiceArg<"online">;
  className?: string;
}

export const defaultWeatherWidget__Args: Partial<PlasmicWeatherWidget__ArgsType> =
  {};

function PlasmicWeatherWidget__RenderFunc(props: {
  variants: PlasmicWeatherWidget__VariantsArgs;
  args: PlasmicWeatherWidget__ArgsType;
  overrides: PlasmicWeatherWidget__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultWeatherWidget__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        { [sty.rootonline]: hasVariant(variants, "online", "online") }
      )}
    >
      {(hasVariant(variants, "online", "online") ? true : true) ? (
        <div
          data-plasmic-name={"rectangle19"}
          data-plasmic-override={overrides.rectangle19}
          className={classNames(projectcss.all, sty.rectangle19, {
            [sty.rectangle19online]: hasVariant(variants, "online", "online")
          })}
        />
      ) : null}
      {(hasVariant(variants, "online", "online") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__psV6B, {
            [sty.freeBoxonline__psV6BjYxjf]: hasVariant(
              variants,
              "online",
              "online"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0C2GR
            )}
          >
            {"Połącz z Wi-Fi, \nby uzyskać dostęp"}
          </div>

          <div
            data-plasmic-name={"texticon"}
            data-plasmic-override={overrides.texticon}
            className={classNames(projectcss.all, sty.texticon)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nLBgu
              )}
            >
              {"do pogody"}
            </div>

            <IconArrowIcon
              className={classNames(projectcss.all, sty.svg__wteMn)}
              role={"img"}
            />
          </div>

          <div
            data-plasmic-name={"iconWeather"}
            data-plasmic-override={overrides.iconWeather}
            className={classNames(projectcss.all, sty.iconWeather)}
          >
            <Group7Icon
              className={classNames(projectcss.all, sty.svg__yj7Rg)}
              role={"img"}
            />
          </div>
        </div>
      ) : null}
      {(hasVariant(variants, "online", "online") ? true : false) ? (
        <div
          data-plasmic-name={"weather"}
          data-plasmic-override={overrides.weather}
          className={classNames(projectcss.all, sty.weather, {
            [sty.weatheronline]: hasVariant(variants, "online", "online")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__lyXw, {
              [sty.freeBoxonline__lyXwJYxjf]: hasVariant(
                variants,
                "online",
                "online"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "PM2.5",
              value: args.airQuality,
              className: classNames(sty.slotTargetAirQuality)
            })}
          </div>

          {(hasVariant(variants, "online", "online") ? true : true) ? (
            <Vector107Icon
              className={classNames(projectcss.all, sty.svg__e5RtC, {
                [sty.svgonline__e5RtCjYxjf]: hasVariant(
                  variants,
                  "online",
                  "online"
                )
              })}
              role={"img"}
            />
          ) : null}

          <div
            data-plasmic-name={"iconWeather2"}
            data-plasmic-override={overrides.iconWeather2}
            className={classNames(projectcss.all, sty.iconWeather2)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___5VzaJ, {
                [sty.freeBoxonline___5VzaJjYxjf]: hasVariant(
                  variants,
                  "online",
                  "online"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Group6Icon
                    className={classNames(projectcss.all, sty.svg__qdO6E)}
                    role={"img"}
                  />
                ),

                value: args.weatherIcon
              })}
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3WQz
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#505050" }}
              >
                {"Na zewnątrz"}
              </span>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__drNxe, {
              [sty.freeBoxonline__drNxeJYxjf]: hasVariant(
                variants,
                "online",
                "online"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "12°C",
              value: args.temperature,
              className: classNames(sty.slotTargetTemperature)
            })}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rJ28X
            )}
          >
            {"Jakość powietrza"}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__sQg1R, {
              [sty.freeBoxonline__sQg1RJYxjf]: hasVariant(
                variants,
                "online",
                "online"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <IconSadIcon
                  className={classNames(projectcss.all, sty.svg__wpvUi)}
                  role={"img"}
                />
              ),

              value: args.airQualityIcon
            })}
          </div>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "rectangle19",
    "texticon",
    "iconWeather",
    "weather",
    "iconWeather2"
  ],
  rectangle19: ["rectangle19"],
  texticon: ["texticon"],
  iconWeather: ["iconWeather"],
  weather: ["weather", "iconWeather2"],
  iconWeather2: ["iconWeather2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rectangle19: "div";
  texticon: "div";
  iconWeather: "div";
  weather: "div";
  iconWeather2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWeatherWidget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWeatherWidget__VariantsArgs;
    args?: PlasmicWeatherWidget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWeatherWidget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWeatherWidget__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWeatherWidget__ArgProps,
      internalVariantPropNames: PlasmicWeatherWidget__VariantProps
    });

    return PlasmicWeatherWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWeatherWidget";
  } else {
    func.displayName = `PlasmicWeatherWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicWeatherWidget = Object.assign(
  // Top-level PlasmicWeatherWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rectangle19: makeNodeComponent("rectangle19"),
    texticon: makeNodeComponent("texticon"),
    iconWeather: makeNodeComponent("iconWeather"),
    weather: makeNodeComponent("weather"),
    iconWeather2: makeNodeComponent("iconWeather2"),

    // Metadata about props expected for PlasmicWeatherWidget
    internalVariantProps: PlasmicWeatherWidget__VariantProps,
    internalArgProps: PlasmicWeatherWidget__ArgProps
  }
);

export default PlasmicWeatherWidget;
/* prettier-ignore-end */
