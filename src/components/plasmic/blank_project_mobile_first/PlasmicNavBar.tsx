// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: jXKRlC2FpR
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicNavBar.module.css"; // plasmic-import: jXKRlC2FpR/css

import Rectangle105Icon from "./icons/PlasmicIcon__Rectangle105"; // plasmic-import: AQaATkY-uE/icon
import IconDomIcon from "./icons/PlasmicIcon__IconDom"; // plasmic-import: sOWy2b1yuZ/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: e7xl9pDzGf/icon
import IconPanelGlownyIcon from "./icons/PlasmicIcon__IconPanelGlowny"; // plasmic-import: DKDrvPLykl/icon

export type PlasmicNavBar__VariantMembers = {};

export type PlasmicNavBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavBar__ArgsType = {};
type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBar__OverridesType = {
  root?: p.Flex<"div">;
  dom?: p.Flex<"div">;
  tryby?: p.Flex<"div">;
  iconModes?: p.Flex<"div">;
  glowna?: p.Flex<"a">;
};

export interface DefaultNavBarProps {
  className?: string;
}

export const defaultNavBar__Args: Partial<PlasmicNavBar__ArgsType> = {};

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNavBar__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <Rectangle105Icon
        className={classNames(projectcss.all, sty.svg__gHUmt)}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"dom"}
        data-plasmic-override={overrides.dom}
        hasGap={true}
        className={classNames(projectcss.all, sty.dom)}
      >
        <IconDomIcon
          className={classNames(projectcss.all, sty.svg__yFmWz)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ahPuq
          )}
        >
          {"Dom"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"tryby"}
        data-plasmic-override={overrides.tryby}
        hasGap={true}
        className={classNames(projectcss.all, sty.tryby)}
      >
        <div
          data-plasmic-name={"iconModes"}
          data-plasmic-override={overrides.iconModes}
          className={classNames(projectcss.all, sty.iconModes)}
        >
          <Group4Icon
            className={classNames(projectcss.all, sty.svg__v33)}
            role={"img"}
          />
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rWwQk
          )}
        >
          {"Tryby"}
        </div>
      </p.Stack>

      <a
        data-plasmic-name={"glowna"}
        data-plasmic-override={overrides.glowna}
        className={classNames(projectcss.all, projectcss.a, sty.glowna)}
      >
        <IconPanelGlownyIcon
          className={classNames(projectcss.all, sty.svg__dymwd)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rZzz
          )}
        >
          {"Główna"}
        </div>
      </a>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dom", "tryby", "iconModes", "glowna"],
  dom: ["dom"],
  tryby: ["tryby", "iconModes"],
  iconModes: ["iconModes"],
  glowna: ["glowna"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  dom: "div";
  tryby: "div";
  iconModes: "div";
  glowna: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps
    });

    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dom: makeNodeComponent("dom"),
    tryby: makeNodeComponent("tryby"),
    iconModes: makeNodeComponent("iconModes"),
    glowna: makeNodeComponent("glowna"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
