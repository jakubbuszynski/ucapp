// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: aoIUbV_IZ6
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicHeatContolWidget.module.css"; // plasmic-import: aoIUbV_IZ6/css

import Ellipse262Icon from "./icons/PlasmicIcon__Ellipse262"; // plasmic-import: LpPtZzW5OtX/icon
import IconHumidityIcon from "./icons/PlasmicIcon__IconHumidity"; // plasmic-import: qOIzQYGwswN/icon

export type PlasmicHeatContolWidget__VariantMembers = {};

export type PlasmicHeatContolWidget__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeatContolWidget__VariantsArgs;
export const PlasmicHeatContolWidget__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHeatContolWidget__ArgsType = {
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeatContolWidget__ArgsType;
export const PlasmicHeatContolWidget__ArgProps = new Array<ArgPropType>("slot");

export type PlasmicHeatContolWidget__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  aktulanie21?: p.Flex<"div">;
  humidity?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultHeatContolWidgetProps {
  slot?: React.ReactNode;
  className?: string;
}

export const defaultHeatContolWidget__Args: Partial<PlasmicHeatContolWidget__ArgsType> =
  {};

function PlasmicHeatContolWidget__RenderFunc(props: {
  variants: PlasmicHeatContolWidget__VariantsArgs;
  args: PlasmicHeatContolWidget__ArgsType;
  overrides: PlasmicHeatContolWidget__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHeatContolWidget__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <Ellipse262Icon
        className={classNames(projectcss.all, sty.svg__ylidb)}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "10°",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
      </div>

      <div
        data-plasmic-name={"aktulanie21"}
        data-plasmic-override={overrides.aktulanie21}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.aktulanie21
        )}
      >
        {"Aktulanie: 21° "}
      </div>

      <div
        data-plasmic-name={"humidity"}
        data-plasmic-override={overrides.humidity}
        className={classNames(projectcss.all, sty.humidity)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"55%"}
        </div>

        <IconHumidityIcon
          className={classNames(projectcss.all, sty.svg__atk1)}
          role={"img"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "aktulanie21", "humidity", "text"],
  freeBox: ["freeBox"],
  aktulanie21: ["aktulanie21"],
  humidity: ["humidity", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  aktulanie21: "div";
  humidity: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeatContolWidget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeatContolWidget__VariantsArgs;
    args?: PlasmicHeatContolWidget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeatContolWidget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeatContolWidget__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeatContolWidget__ArgProps,
      internalVariantPropNames: PlasmicHeatContolWidget__VariantProps
    });

    return PlasmicHeatContolWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeatContolWidget";
  } else {
    func.displayName = `PlasmicHeatContolWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicHeatContolWidget = Object.assign(
  // Top-level PlasmicHeatContolWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    aktulanie21: makeNodeComponent("aktulanie21"),
    humidity: makeNodeComponent("humidity"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHeatContolWidget
    internalVariantProps: PlasmicHeatContolWidget__VariantProps,
    internalArgProps: PlasmicHeatContolWidget__ArgProps
  }
);

export default PlasmicHeatContolWidget;
/* prettier-ignore-end */
