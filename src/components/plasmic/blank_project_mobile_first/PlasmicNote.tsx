// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: aWZ5Rm1too
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicNote.module.css"; // plasmic-import: aWZ5Rm1too/css

import IconMissedCallIcon from "./icons/PlasmicIcon__IconMissedCall"; // plasmic-import: nlVS5Yl-X/icon
import IconCheckMail2Icon from "../unicomm_frontend/icons/PlasmicIcon__IconCheckMail2"; // plasmic-import: gT8hvACrhq/icon
import IconFamilyHouseIcon from "./icons/PlasmicIcon__IconFamilyHouse"; // plasmic-import: fa-x8YpM-j/icon
import IconComunityIcon from "./icons/PlasmicIcon__IconComunity"; // plasmic-import: bRMD7TZ0qg/icon

export type PlasmicNote__VariantMembers = {
  types: "community" | "audio" | "empty";
};

export type PlasmicNote__VariantsArgs = {
  types?: SingleChoiceArg<"community" | "audio" | "empty">;
};

type VariantPropType = keyof PlasmicNote__VariantsArgs;
export const PlasmicNote__VariantProps = new Array<VariantPropType>("types");

export type PlasmicNote__ArgsType = {};
type ArgPropType = keyof PlasmicNote__ArgsType;
export const PlasmicNote__ArgProps = new Array<ArgPropType>();

export type PlasmicNote__OverridesType = {
  root?: p.Flex<"div">;
  notificationsMainPanel2?: p.Flex<"div">;
  frame3958?: p.Flex<"div">;
  frame3957?: p.Flex<"div">;
  notificationsMainPanel3?: p.Flex<"div">;
  frame3959?: p.Flex<"div">;
  frame3960?: p.Flex<"div">;
  notificationsMainPanel4?: p.Flex<"div">;
  frame3953?: p.Flex<"div">;
  frame3951?: p.Flex<"div">;
  notificationsMainPanel?: p.Flex<"div">;
  frame3950?: p.Flex<"div">;
  notificationsMainPanel5?: p.Flex<"div">;
  frame3961?: p.Flex<"div">;
  frame3962?: p.Flex<"div">;
};

export interface DefaultNoteProps {
  types?: SingleChoiceArg<"community" | "audio" | "empty">;
  className?: string;
}

export const defaultNote__Args: Partial<PlasmicNote__ArgsType> = {};

function PlasmicNote__RenderFunc(props: {
  variants: PlasmicNote__VariantsArgs;
  args: PlasmicNote__ArgsType;
  overrides: PlasmicNote__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNote__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.roottypes_audio]: hasVariant(variants, "types", "audio"),
          [sty.roottypes_community]: hasVariant(variants, "types", "community"),
          [sty.roottypes_empty]: hasVariant(variants, "types", "empty")
        }
      )}
    >
      {(hasVariant(variants, "types", "audio") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"notificationsMainPanel2"}
          data-plasmic-override={overrides.notificationsMainPanel2}
          hasGap={true}
          className={classNames(projectcss.all, sty.notificationsMainPanel2, {
            [sty.notificationsMainPanel2types_audio]: hasVariant(
              variants,
              "types",
              "audio"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3958"}
            data-plasmic-override={overrides.frame3958}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3958)}
          >
            <div
              data-plasmic-name={"frame3957"}
              data-plasmic-override={overrides.frame3957}
              className={classNames(projectcss.all, sty.frame3957)}
            >
              {(hasVariant(variants, "types", "audio") ? true : true) ? (
                <IconMissedCallIcon
                  className={classNames(projectcss.all, sty.svg___7WL1X, {
                    [sty.svgtypes_audio___7WL1XpXcbj]: hasVariant(
                      variants,
                      "types",
                      "audio"
                    )
                  })}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Dyv8
                )}
              >
                {"Nieodebrane #1"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0JEHa
                )}
              >
                {"7 kwietnia | 10:00"}
              </div>
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "types", "empty") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"notificationsMainPanel3"}
          data-plasmic-override={overrides.notificationsMainPanel3}
          hasGap={true}
          className={classNames(projectcss.all, sty.notificationsMainPanel3, {
            [sty.notificationsMainPanel3types_empty]: hasVariant(
              variants,
              "types",
              "empty"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3959"}
            data-plasmic-override={overrides.frame3959}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3959)}
          >
            <div
              data-plasmic-name={"frame3960"}
              data-plasmic-override={overrides.frame3960}
              className={classNames(projectcss.all, sty.frame3960)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2YwFd
                )}
              >
                {"Panel powiadomie≈Ñ"}
              </div>

              {(hasVariant(variants, "types", "empty") ? true : true) ? (
                <IconCheckMail2Icon
                  className={classNames(projectcss.all, sty.svg__tswx8, {
                    [sty.svgtypes_empty__tswx8Go9Q4]: hasVariant(
                      variants,
                      "types",
                      "empty"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "types", "empty")
          ? true
          : hasVariant(variants, "types", "audio")
          ? true
          : hasVariant(variants, "types", "community")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"notificationsMainPanel4"}
          data-plasmic-override={overrides.notificationsMainPanel4}
          hasGap={true}
          className={classNames(projectcss.all, sty.notificationsMainPanel4, {
            [sty.notificationsMainPanel4types_audio]: hasVariant(
              variants,
              "types",
              "audio"
            ),
            [sty.notificationsMainPanel4types_community]: hasVariant(
              variants,
              "types",
              "community"
            ),
            [sty.notificationsMainPanel4types_empty]: hasVariant(
              variants,
              "types",
              "empty"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3953"}
            data-plasmic-override={overrides.frame3953}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3953)}
          >
            <div
              data-plasmic-name={"frame3951"}
              data-plasmic-override={overrides.frame3951}
              className={classNames(projectcss.all, sty.frame3951, {
                [sty.frame3951types_empty]: hasVariant(
                  variants,
                  "types",
                  "empty"
                )
              })}
            >
              <IconFamilyHouseIcon
                className={classNames(projectcss.all, sty.svg__cetFb)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0RfI6
                )}
              >
                {"Notatka #1"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dJxIq
                )}
              >
                {"7 kwietnia | 10:00"}
              </div>
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "types", "community") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"notificationsMainPanel"}
          data-plasmic-override={overrides.notificationsMainPanel}
          hasGap={true}
          className={classNames(projectcss.all, sty.notificationsMainPanel, {
            [sty.notificationsMainPaneltypes_community]: hasVariant(
              variants,
              "types",
              "community"
            )
          })}
        >
          <div
            data-plasmic-name={"frame3950"}
            data-plasmic-override={overrides.frame3950}
            className={classNames(projectcss.all, sty.frame3950)}
          >
            {(hasVariant(variants, "types", "community") ? true : true) ? (
              <IconComunityIcon
                className={classNames(projectcss.all, sty.svg__qOwnF, {
                  [sty.svgtypes_community__qOwnF7Q8L9]: hasVariant(
                    variants,
                    "types",
                    "community"
                  )
                })}
                role={"img"}
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uhwI4
              )}
            >
              {"Domofon XXI wieku"}
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__n6B1H
              )}
            >
              {"7 kwietnia | 10:00"}
            </div>
          </div>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "types", "audio") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"notificationsMainPanel5"}
          data-plasmic-override={overrides.notificationsMainPanel5}
          hasGap={true}
          className={classNames(projectcss.all, sty.notificationsMainPanel5, {
            [sty.notificationsMainPanel5types_audio]: hasVariant(
              variants,
              "types",
              "audio"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame3961"}
            data-plasmic-override={overrides.frame3961}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3961)}
          >
            <div
              data-plasmic-name={"frame3962"}
              data-plasmic-override={overrides.frame3962}
              className={classNames(projectcss.all, sty.frame3962)}
            >
              {(hasVariant(variants, "types", "audio") ? true : true) ? (
                <IconMissedCallIcon
                  className={classNames(projectcss.all, sty.svg__p1VP, {
                    [sty.svgtypes_audio__p1VPpXcbj]: hasVariant(
                      variants,
                      "types",
                      "audio"
                    )
                  })}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nsI8
                )}
              >
                {"Nieodebrane #1"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ePWq3
                )}
              >
                {"7 kwietnia | 10:00"}
              </div>
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "notificationsMainPanel2",
    "frame3958",
    "frame3957",
    "notificationsMainPanel3",
    "frame3959",
    "frame3960",
    "notificationsMainPanel4",
    "frame3953",
    "frame3951",
    "notificationsMainPanel",
    "frame3950",
    "notificationsMainPanel5",
    "frame3961",
    "frame3962"
  ],
  notificationsMainPanel2: [
    "notificationsMainPanel2",
    "frame3958",
    "frame3957"
  ],
  frame3958: ["frame3958", "frame3957"],
  frame3957: ["frame3957"],
  notificationsMainPanel3: [
    "notificationsMainPanel3",
    "frame3959",
    "frame3960"
  ],
  frame3959: ["frame3959", "frame3960"],
  frame3960: ["frame3960"],
  notificationsMainPanel4: [
    "notificationsMainPanel4",
    "frame3953",
    "frame3951"
  ],
  frame3953: ["frame3953", "frame3951"],
  frame3951: ["frame3951"],
  notificationsMainPanel: ["notificationsMainPanel", "frame3950"],
  frame3950: ["frame3950"],
  notificationsMainPanel5: [
    "notificationsMainPanel5",
    "frame3961",
    "frame3962"
  ],
  frame3961: ["frame3961", "frame3962"],
  frame3962: ["frame3962"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  notificationsMainPanel2: "div";
  frame3958: "div";
  frame3957: "div";
  notificationsMainPanel3: "div";
  frame3959: "div";
  frame3960: "div";
  notificationsMainPanel4: "div";
  frame3953: "div";
  frame3951: "div";
  notificationsMainPanel: "div";
  frame3950: "div";
  notificationsMainPanel5: "div";
  frame3961: "div";
  frame3962: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNote__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNote__VariantsArgs;
    args?: PlasmicNote__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNote__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNote__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNote__ArgProps,
      internalVariantPropNames: PlasmicNote__VariantProps
    });

    return PlasmicNote__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNote";
  } else {
    func.displayName = `PlasmicNote.${nodeName}`;
  }
  return func;
}

export const PlasmicNote = Object.assign(
  // Top-level PlasmicNote renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    notificationsMainPanel2: makeNodeComponent("notificationsMainPanel2"),
    frame3958: makeNodeComponent("frame3958"),
    frame3957: makeNodeComponent("frame3957"),
    notificationsMainPanel3: makeNodeComponent("notificationsMainPanel3"),
    frame3959: makeNodeComponent("frame3959"),
    frame3960: makeNodeComponent("frame3960"),
    notificationsMainPanel4: makeNodeComponent("notificationsMainPanel4"),
    frame3953: makeNodeComponent("frame3953"),
    frame3951: makeNodeComponent("frame3951"),
    notificationsMainPanel: makeNodeComponent("notificationsMainPanel"),
    frame3950: makeNodeComponent("frame3950"),
    notificationsMainPanel5: makeNodeComponent("notificationsMainPanel5"),
    frame3961: makeNodeComponent("frame3961"),
    frame3962: makeNodeComponent("frame3962"),

    // Metadata about props expected for PlasmicNote
    internalVariantProps: PlasmicNote__VariantProps,
    internalArgProps: PlasmicNote__ArgProps
  }
);

export default PlasmicNote;
/* prettier-ignore-end */
