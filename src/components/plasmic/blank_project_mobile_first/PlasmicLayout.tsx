// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: Pi1SnN7SLJ
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TopBar from "../../TopBar"; // plasmic-import: nsqmq6QdR8/component
import NavBar from "../../NavBar"; // plasmic-import: jXKRlC2FpR/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicLayout.module.css"; // plasmic-import: Pi1SnN7SLJ/css

export type PlasmicLayout__VariantMembers = {
  shortTopBar: "shortTopBar";
  withoutNavBar: "withoutNavBar";
  displayNone: "displayNone";
};

export type PlasmicLayout__VariantsArgs = {
  shortTopBar?: SingleBooleanChoiceArg<"shortTopBar">;
  withoutNavBar?: SingleBooleanChoiceArg<"withoutNavBar">;
  displayNone?: SingleBooleanChoiceArg<"displayNone">;
};

type VariantPropType = keyof PlasmicLayout__VariantsArgs;
export const PlasmicLayout__VariantProps = new Array<VariantPropType>(
  "shortTopBar",
  "withoutNavBar",
  "displayNone"
);

export type PlasmicLayout__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLayout__ArgsType;
export const PlasmicLayout__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLayout__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  topBar?: p.Flex<typeof TopBar>;
  navBar?: p.Flex<typeof NavBar>;
};

export interface DefaultLayoutProps {
  children?: React.ReactNode;
  shortTopBar?: SingleBooleanChoiceArg<"shortTopBar">;
  withoutNavBar?: SingleBooleanChoiceArg<"withoutNavBar">;
  displayNone?: SingleBooleanChoiceArg<"displayNone">;
  className?: string;
}

export const defaultLayout__Args: Partial<PlasmicLayout__ArgsType> = {};

function PlasmicLayout__RenderFunc(props: {
  variants: PlasmicLayout__VariantsArgs;
  args: PlasmicLayout__ArgsType;
  overrides: PlasmicLayout__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultLayout__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootdisplayNone]: hasVariant(
            variants,
            "displayNone",
            "displayNone"
          ),
          [sty.rootshortTopBar]: hasVariant(
            variants,
            "shortTopBar",
            "shortTopBar"
          ),
          [sty.rootwithoutNavBar]: hasVariant(
            variants,
            "withoutNavBar",
            "withoutNavBar"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxshortTopBar]: hasVariant(
            variants,
            "shortTopBar",
            "shortTopBar"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
      </div>

      {(hasVariant(variants, "displayNone", "displayNone") ? true : true) ? (
        <TopBar
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          className={classNames("__wab_instance", sty.topBar, {
            [sty.topBardisplayNone]: hasVariant(
              variants,
              "displayNone",
              "displayNone"
            ),
            [sty.topBarshortTopBar]: hasVariant(
              variants,
              "shortTopBar",
              "shortTopBar"
            ),
            [sty.topBarwithoutNavBar]: hasVariant(
              variants,
              "withoutNavBar",
              "withoutNavBar"
            )
          })}
          colapsed={
            hasVariant(variants, "withoutNavBar", "withoutNavBar")
              ? true
              : hasVariant(variants, "shortTopBar", "shortTopBar")
              ? true
              : undefined
          }
        />
      ) : null}
      {(
        hasVariant(variants, "displayNone", "displayNone")
          ? true
          : hasVariant(variants, "withoutNavBar", "withoutNavBar")
          ? true
          : true
      ) ? (
        <NavBar
          data-plasmic-name={"navBar"}
          data-plasmic-override={overrides.navBar}
          className={classNames("__wab_instance", sty.navBar, {
            [sty.navBardisplayNone]: hasVariant(
              variants,
              "displayNone",
              "displayNone"
            ),
            [sty.navBarshortTopBar]: hasVariant(
              variants,
              "shortTopBar",
              "shortTopBar"
            ),
            [sty.navBarwithoutNavBar]: hasVariant(
              variants,
              "withoutNavBar",
              "withoutNavBar"
            )
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "topBar", "navBar"],
  freeBox: ["freeBox"],
  topBar: ["topBar"],
  navBar: ["navBar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  topBar: typeof TopBar;
  navBar: typeof NavBar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLayout__VariantsArgs;
    args?: PlasmicLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLayout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLayout__ArgProps,
      internalVariantPropNames: PlasmicLayout__VariantProps
    });

    return PlasmicLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLayout";
  } else {
    func.displayName = `PlasmicLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicLayout = Object.assign(
  // Top-level PlasmicLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    topBar: makeNodeComponent("topBar"),
    navBar: makeNodeComponent("navBar"),

    // Metadata about props expected for PlasmicLayout
    internalVariantProps: PlasmicLayout__VariantProps,
    internalArgProps: PlasmicLayout__ArgProps
  }
);

export default PlasmicLayout;
/* prettier-ignore-end */
