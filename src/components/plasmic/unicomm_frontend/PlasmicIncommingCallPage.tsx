// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: 0OH69dlSQ5
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MuteIcon from "../../MuteIcon"; // plasmic-import: _jlAiRe8-_/component
import Header from "../../Header"; // plasmic-import: t1tce5B7Zb/component
import Btn from "../../Btn"; // plasmic-import: 6K82epA0cI/component
import Button from "../../Button"; // plasmic-import: gP-HYzHmfTq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project_mobile_first/plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicIncommingCallPage.module.css"; // plasmic-import: 0OH69dlSQ5/css

import IconDoorCloseIcon from "./icons/PlasmicIcon__IconDoorClose"; // plasmic-import: da9sopleIS/icon
import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: eE8WHR2991/icon
import IconConfirmCallIcon from "./icons/PlasmicIcon__IconConfirmCall"; // plasmic-import: oO4s45yxlg/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: uAbKMBtqI6u/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tnEAR3AGGw-/icon

export type PlasmicIncommingCallPage__VariantMembers = {};

export type PlasmicIncommingCallPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicIncommingCallPage__VariantsArgs;
export const PlasmicIncommingCallPage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicIncommingCallPage__ArgsType = {
  video?: React.ReactNode;
};

type ArgPropType = keyof PlasmicIncommingCallPage__ArgsType;
export const PlasmicIncommingCallPage__ArgProps = new Array<ArgPropType>(
  "video"
);

export type PlasmicIncommingCallPage__OverridesType = {
  root?: p.Flex<"div">;
  _0121DomofonDzwoni?: p.Flex<"div">;
  rectangle50?: p.Flex<"div">;
  image34?: p.Flex<"div">;
  rectangle31?: p.Flex<"div">;
  muteIcon?: p.Flex<typeof MuteIcon>;
  header?: p.Flex<typeof Header>;
  buttonsOpenTheDoor?: p.Flex<"div">;
  buttonsMute?: p.Flex<"div">;
  rectangle51?: p.Flex<"div">;
  iconSound?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultIncommingCallPageProps {
  video?: React.ReactNode;
  className?: string;
}

export const defaultIncommingCallPage__Args: Partial<PlasmicIncommingCallPage__ArgsType> =
  {};

function PlasmicIncommingCallPage__RenderFunc(props: {
  variants: PlasmicIncommingCallPage__VariantsArgs;
  args: PlasmicIncommingCallPage__ArgsType;
  overrides: PlasmicIncommingCallPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultIncommingCallPage__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"_0121DomofonDzwoni"}
            data-plasmic-override={overrides._0121DomofonDzwoni}
            className={classNames(projectcss.all, sty._0121DomofonDzwoni)}
          >
            <div
              data-plasmic-name={"rectangle50"}
              data-plasmic-override={overrides.rectangle50}
              className={classNames(projectcss.all, sty.rectangle50)}
            />

            <div
              data-plasmic-name={"image34"}
              data-plasmic-override={overrides.image34}
              className={classNames(projectcss.all, sty.image34)}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.video
              })}
            </div>

            {false ? (
              <div
                data-plasmic-name={"rectangle31"}
                data-plasmic-override={overrides.rectangle31}
                className={classNames(projectcss.all, sty.rectangle31)}
              />
            ) : null}

            <MuteIcon
              data-plasmic-name={"muteIcon"}
              data-plasmic-override={overrides.muteIcon}
              className={classNames("__wab_instance", sty.muteIcon)}
            />

            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div
              data-plasmic-name={"buttonsOpenTheDoor"}
              data-plasmic-override={overrides.buttonsOpenTheDoor}
              className={classNames(projectcss.all, sty.buttonsOpenTheDoor)}
            >
              <Btn
                className={classNames("__wab_instance", sty.btn__m2DiL)}
                color={["grey"]}
                icon={
                  <IconDoorCloseIcon
                    className={classNames(projectcss.all, sty.svg__lGmec)}
                    role={"img"}
                  />
                }
                shape={"vertical" as const}
              />
            </div>

            <div
              data-plasmic-name={"buttonsMute"}
              data-plasmic-override={overrides.buttonsMute}
              className={classNames(projectcss.all, sty.buttonsMute)}
            >
              <div
                data-plasmic-name={"rectangle51"}
                data-plasmic-override={overrides.rectangle51}
                className={classNames(projectcss.all, sty.rectangle51)}
              />

              <div
                data-plasmic-name={"iconSound"}
                data-plasmic-override={overrides.iconSound}
                className={classNames(projectcss.all, sty.iconSound)}
              >
                <Group9Icon
                  className={classNames(projectcss.all, sty.svg__tfMrW)}
                  role={"img"}
                />
              </div>

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Wycisz"}
              </div>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zx53I)}
              >
                <Btn className={classNames("__wab_instance", sty.btn__l7JvM)} />

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dS3Cx)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__khOmI
                      )}
                    />

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__g1Lja
                      )}
                    />
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "_0121DomofonDzwoni",
    "rectangle50",
    "image34",
    "rectangle31",
    "muteIcon",
    "header",
    "buttonsOpenTheDoor",
    "buttonsMute",
    "rectangle51",
    "iconSound",
    "text"
  ],
  _0121DomofonDzwoni: [
    "_0121DomofonDzwoni",
    "rectangle50",
    "image34",
    "rectangle31",
    "muteIcon",
    "header",
    "buttonsOpenTheDoor",
    "buttonsMute",
    "rectangle51",
    "iconSound",
    "text"
  ],
  rectangle50: ["rectangle50"],
  image34: ["image34"],
  rectangle31: ["rectangle31"],
  muteIcon: ["muteIcon"],
  header: ["header"],
  buttonsOpenTheDoor: ["buttonsOpenTheDoor"],
  buttonsMute: ["buttonsMute", "rectangle51", "iconSound", "text"],
  rectangle51: ["rectangle51"],
  iconSound: ["iconSound"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  _0121DomofonDzwoni: "div";
  rectangle50: "div";
  image34: "div";
  rectangle31: "div";
  muteIcon: typeof MuteIcon;
  header: typeof Header;
  buttonsOpenTheDoor: "div";
  buttonsMute: "div";
  rectangle51: "div";
  iconSound: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIncommingCallPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIncommingCallPage__VariantsArgs;
    args?: PlasmicIncommingCallPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIncommingCallPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIncommingCallPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicIncommingCallPage__ArgProps,
      internalVariantPropNames: PlasmicIncommingCallPage__VariantProps
    });

    return PlasmicIncommingCallPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIncommingCallPage";
  } else {
    func.displayName = `PlasmicIncommingCallPage.${nodeName}`;
  }
  return func;
}

export const PlasmicIncommingCallPage = Object.assign(
  // Top-level PlasmicIncommingCallPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _0121DomofonDzwoni: makeNodeComponent("_0121DomofonDzwoni"),
    rectangle50: makeNodeComponent("rectangle50"),
    image34: makeNodeComponent("image34"),
    rectangle31: makeNodeComponent("rectangle31"),
    muteIcon: makeNodeComponent("muteIcon"),
    header: makeNodeComponent("header"),
    buttonsOpenTheDoor: makeNodeComponent("buttonsOpenTheDoor"),
    buttonsMute: makeNodeComponent("buttonsMute"),
    rectangle51: makeNodeComponent("rectangle51"),
    iconSound: makeNodeComponent("iconSound"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicIncommingCallPage
    internalVariantProps: PlasmicIncommingCallPage__VariantProps,
    internalArgProps: PlasmicIncommingCallPage__ArgProps
  }
);

export default PlasmicIncommingCallPage;
/* prettier-ignore-end */
