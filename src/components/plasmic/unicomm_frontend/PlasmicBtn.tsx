// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: 6K82epA0cI
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project_mobile_first/plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicBtn.module.css"; // plasmic-import: 6K82epA0cI/css

import IconConfirmCallIcon from "./icons/PlasmicIcon__IconConfirmCall"; // plasmic-import: oO4s45yxlg/icon

export type PlasmicBtn__VariantMembers = {
  isDisabled: "isDisabled";
  color: "grey" | "highContrast";
  shape: "short" | "vertical";
};

export type PlasmicBtn__VariantsArgs = {
  isDisabled?: MultiChoiceArg<"isDisabled">;
  color?: MultiChoiceArg<"grey" | "highContrast">;
  shape?: SingleChoiceArg<"short" | "vertical">;
};

type VariantPropType = keyof PlasmicBtn__VariantsArgs;
export const PlasmicBtn__VariantProps = new Array<VariantPropType>(
  "isDisabled",
  "color",
  "shape"
);

export type PlasmicBtn__ArgsType = {
  icon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBtn__ArgsType;
export const PlasmicBtn__ArgProps = new Array<ArgPropType>("icon");

export type PlasmicBtn__OverridesType = {
  root?: p.Flex<"div">;
  frame3946?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultBtnProps {
  icon?: React.ReactNode;
  isDisabled?: MultiChoiceArg<"isDisabled">;
  color?: MultiChoiceArg<"grey" | "highContrast">;
  shape?: SingleChoiceArg<"short" | "vertical">;
  className?: string;
}

export const defaultBtn__Args: Partial<PlasmicBtn__ArgsType> = {};

function PlasmicBtn__RenderFunc(props: {
  variants: PlasmicBtn__VariantsArgs;
  args: PlasmicBtn__ArgsType;
  overrides: PlasmicBtn__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultBtn__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root,
        {
          [sty.rootcolor_grey]: hasVariant(variants, "color", "grey"),
          [sty.rootcolor_highContrast]: hasVariant(
            variants,
            "color",
            "highContrast"
          ),
          [sty.rootcolor_highContrast_shape_short]:
            hasVariant(variants, "color", "highContrast") &&
            hasVariant(variants, "shape", "short"),
          [sty.rootisDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.rootisDisabled_color_grey]:
            hasVariant(variants, "isDisabled", "isDisabled") &&
            hasVariant(variants, "color", "grey"),
          [sty.rootshape_short]: hasVariant(variants, "shape", "short"),
          [sty.rootshape_vertical]: hasVariant(variants, "shape", "vertical")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"frame3946"}
        data-plasmic-override={overrides.frame3946}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame3946, {
          [sty.frame3946color_grey]: hasVariant(variants, "color", "grey"),
          [sty.frame3946color_highContrast_shape_short]:
            hasVariant(variants, "color", "highContrast") &&
            hasVariant(variants, "shape", "short"),
          [sty.frame3946shape_vertical]: hasVariant(
            variants,
            "shape",
            "vertical"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <IconConfirmCallIcon
              className={classNames(projectcss.all, sty.svg__iRr3I)}
              role={"img"}
            />
          ),

          value: args.icon,
          className: classNames(sty.slotTargetIcon, {
            [sty.slotTargetIconcolor_grey]: hasVariant(
              variants,
              "color",
              "grey"
            ),
            [sty.slotTargetIconcolor_highContrast_shape_short]:
              hasVariant(variants, "color", "highContrast") &&
              hasVariant(variants, "shape", "short"),
            [sty.slotTargetIconshape_short]: hasVariant(
              variants,
              "shape",
              "short"
            ),
            [sty.slotTargetIconshape_vertical]: hasVariant(
              variants,
              "shape",
              "vertical"
            )
          })
        })}

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textcolor_grey]: hasVariant(variants, "color", "grey"),
              [sty.textshape_short]: hasVariant(variants, "shape", "short"),
              [sty.textshape_vertical]: hasVariant(
                variants,
                "shape",
                "vertical"
              )
            }
          )}
        >
          {"Odbierz"}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "frame3946", "text"],
  frame3946: ["frame3946", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame3946: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBtn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBtn__VariantsArgs;
    args?: PlasmicBtn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBtn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBtn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBtn__ArgProps,
      internalVariantPropNames: PlasmicBtn__VariantProps
    });

    return PlasmicBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBtn";
  } else {
    func.displayName = `PlasmicBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicBtn = Object.assign(
  // Top-level PlasmicBtn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame3946: makeNodeComponent("frame3946"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicBtn
    internalVariantProps: PlasmicBtn__VariantProps,
    internalArgProps: PlasmicBtn__ArgProps
  }
);

export default PlasmicBtn;
/* prettier-ignore-end */
