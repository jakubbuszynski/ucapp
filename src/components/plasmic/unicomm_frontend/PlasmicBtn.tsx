// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wGQNdEnY25VfiXqc2ZGJrZ
// Component: s_QabdfozE0
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project_mobile_first/plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wGQNdEnY25VfiXqc2ZGJrZ/projectcss
import sty from "./PlasmicBtn.module.css"; // plasmic-import: s_QabdfozE0/css

import IconConfirmCallIcon from "./icons/PlasmicIcon__IconConfirmCall"; // plasmic-import: oO4s45yxlg/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: tnEAR3AGGw-/icon
import IconArrow2Icon from "./icons/PlasmicIcon__IconArrow2"; // plasmic-import: OMXFNCG8JY/icon
import AlwaysOnIcon from "./icons/PlasmicIcon__AlwaysOn"; // plasmic-import: trfK7-EUa1/icon

export type PlasmicBtn__VariantMembers = {
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
  isDisabled: "isDisabled";
  shape: "short" | "vertical" | "iconOnly" | "_36";
  color: "dark" | "highContrast" | "grey" | "transparent";
  navigation: "unnamedVariant";
};

export type PlasmicBtn__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  shape?: SingleChoiceArg<"short" | "vertical" | "iconOnly" | "_36">;
  color?: SingleChoiceArg<"dark" | "highContrast" | "grey" | "transparent">;
  navigation?: SingleChoiceArg<"unnamedVariant">;
};

type VariantPropType = keyof PlasmicBtn__VariantsArgs;
export const PlasmicBtn__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "showEndIcon",
  "isDisabled",
  "shape",
  "color",
  "navigation"
);

export type PlasmicBtn__ArgsType = {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  link?: string;
};

type ArgPropType = keyof PlasmicBtn__ArgsType;
export const PlasmicBtn__ArgProps = new Array<ArgPropType>(
  "children",
  "startIcon",
  "endIcon",
  "link"
);

export type PlasmicBtn__OverridesType = {
  root?: p.Flex<"button">;
  freeBox?: p.Flex<"div">;
  frame3947?: p.Flex<"div">;
  startIconContainer?: p.Flex<"div">;
  contentContainer?: p.Flex<"div">;
  endIconContainer?: p.Flex<"div">;
  alwaysOn?: p.Flex<"div">;
  rectangle20?: p.Flex<"div">;
  alwaysOn48X48?: p.Flex<"div">;
  rectangle4486?: p.Flex<"div">;
  yekst?: p.Flex<"div">;
  loremIpsum?: p.Flex<"div">;
};

export interface DefaultBtnProps extends pp.BaseButtonProps {
  shape?: SingleChoiceArg<"short" | "vertical" | "iconOnly" | "_36">;
  color?: SingleChoiceArg<"dark" | "highContrast" | "grey" | "transparent">;
  navigation?: SingleChoiceArg<"unnamedVariant">;
}

function PlasmicBtn__RenderFunc(props: {
  variants: PlasmicBtn__VariantsArgs;
  args: PlasmicBtn__ArgsType;
  overrides: PlasmicBtn__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    (hasVariant(variants, "navigation", "unnamedVariant") ? true : true) ? (
      <p.Stack
        as={"button"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.button,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root,
          {
            [sty.rootcolor_dark]: hasVariant(variants, "color", "dark"),
            [sty.rootcolor_grey]: hasVariant(variants, "color", "grey"),
            [sty.rootcolor_highContrast]: hasVariant(
              variants,
              "color",
              "highContrast"
            ),
            [sty.rootcolor_transparent]: hasVariant(
              variants,
              "color",
              "transparent"
            ),
            [sty.rootisDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),
            [sty.rootnavigation_unnamedVariant]: hasVariant(
              variants,
              "navigation",
              "unnamedVariant"
            ),
            [sty.rootshape__36]: hasVariant(variants, "shape", "_36"),
            [sty.rootshape_short]: hasVariant(variants, "shape", "short"),
            [sty.rootshape_short_showEndIcon]:
              hasVariant(variants, "showEndIcon", "showEndIcon") &&
              hasVariant(variants, "shape", "short"),
            [sty.rootshape_vertical]: hasVariant(variants, "shape", "vertical"),
            [sty.rootshowEndIcon]: hasVariant(
              variants,
              "showEndIcon",
              "showEndIcon"
            ),
            [sty.rootshowStartIcon]: hasVariant(
              variants,
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.rootshowStartIcon_shape_short]:
              hasVariant(variants, "shape", "short") &&
              hasVariant(variants, "showStartIcon", "showStartIcon")
          }
        )}
      >
        {(
          hasVariant(variants, "navigation", "unnamedVariant") ? true : true
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxcolor_dark]: hasVariant(variants, "color", "dark"),
              [sty.freeBoxcolor_grey]: hasVariant(variants, "color", "grey"),
              [sty.freeBoxcolor_highContrast]: hasVariant(
                variants,
                "color",
                "highContrast"
              ),
              [sty.freeBoxcolor_transparent]: hasVariant(
                variants,
                "color",
                "transparent"
              ),
              [sty.freeBoxisDisabled]: hasVariant(
                variants,
                "isDisabled",
                "isDisabled"
              ),
              [sty.freeBoxnavigation_unnamedVariant]: hasVariant(
                variants,
                "navigation",
                "unnamedVariant"
              ),
              [sty.freeBoxshape__36]: hasVariant(variants, "shape", "_36"),
              [sty.freeBoxshape_iconOnly]: hasVariant(
                variants,
                "shape",
                "iconOnly"
              ),
              [sty.freeBoxshape_short]: hasVariant(variants, "shape", "short"),
              [sty.freeBoxshape_vertical]: hasVariant(
                variants,
                "shape",
                "vertical"
              ),
              [sty.freeBoxshowStartIcon]: hasVariant(
                variants,
                "showStartIcon",
                "showStartIcon"
              )
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame3947"}
              data-plasmic-override={overrides.frame3947}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame3947, {
                [sty.frame3947color_transparent]: hasVariant(
                  variants,
                  "color",
                  "transparent"
                ),
                [sty.frame3947isDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),
                [sty.frame3947shape__36]: hasVariant(variants, "shape", "_36"),
                [sty.frame3947shape_vertical]: hasVariant(
                  variants,
                  "shape",
                  "vertical"
                )
              })}
            >
              {(
                hasVariant(variants, "shape", "_36")
                  ? true
                  : hasVariant(variants, "shape", "iconOnly")
                  ? true
                  : hasVariant(variants, "shape", "vertical")
                  ? true
                  : hasVariant(variants, "shape", "short")
                  ? true
                  : hasVariant(variants, "showStartIcon", "showStartIcon")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"startIconContainer"}
                  data-plasmic-override={overrides.startIconContainer}
                  className={classNames(
                    projectcss.all,
                    sty.startIconContainer,
                    {
                      [sty.startIconContainercolor_dark]: hasVariant(
                        variants,
                        "color",
                        "dark"
                      ),
                      [sty.startIconContainershape__36]: hasVariant(
                        variants,
                        "shape",
                        "_36"
                      ),
                      [sty.startIconContainershape_iconOnly]: hasVariant(
                        variants,
                        "shape",
                        "iconOnly"
                      ),
                      [sty.startIconContainershape_short]: hasVariant(
                        variants,
                        "shape",
                        "short"
                      ),
                      [sty.startIconContainershape_vertical]: hasVariant(
                        variants,
                        "shape",
                        "vertical"
                      ),
                      [sty.startIconContainershowStartIcon]: hasVariant(
                        variants,
                        "showStartIcon",
                        "showStartIcon"
                      ),
                      [sty.startIconContainershowStartIcon_shape_short]:
                        hasVariant(variants, "shape", "short") &&
                        hasVariant(variants, "showStartIcon", "showStartIcon"),
                      [sty.startIconContainershowStartIcon_shape_vertical_color_dark]:
                        hasVariant(
                          variants,
                          "showStartIcon",
                          "showStartIcon"
                        ) &&
                        hasVariant(variants, "shape", "vertical") &&
                        hasVariant(variants, "color", "dark")
                    }
                  )}
                >
                  {(hasVariant(variants, "shape", "_36") ? true : true)
                    ? p.renderPlasmicSlot({
                        defaultContents: (
                          <IconConfirmCallIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__oxa8F
                            )}
                            role={"img"}
                          />
                        ),

                        value: args.startIcon,
                        className: classNames(sty.slotTargetStartIcon, {
                          [sty.slotTargetStartIconcolor_dark]: hasVariant(
                            variants,
                            "color",
                            "dark"
                          ),
                          [sty.slotTargetStartIconcolor_highContrast]:
                            hasVariant(variants, "color", "highContrast"),
                          [sty.slotTargetStartIconshape__36]: hasVariant(
                            variants,
                            "shape",
                            "_36"
                          ),
                          [sty.slotTargetStartIconshape_short]: hasVariant(
                            variants,
                            "shape",
                            "short"
                          ),
                          [sty.slotTargetStartIconshape_vertical]: hasVariant(
                            variants,
                            "shape",
                            "vertical"
                          ),
                          [sty.slotTargetStartIconshowStartIcon]: hasVariant(
                            variants,
                            "showStartIcon",
                            "showStartIcon"
                          ),
                          [sty.slotTargetStartIconshowStartIcon_shape_vertical_color_dark]:
                            hasVariant(
                              variants,
                              "showStartIcon",
                              "showStartIcon"
                            ) &&
                            hasVariant(variants, "shape", "vertical") &&
                            hasVariant(variants, "color", "dark")
                        })
                      })
                    : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "shape", "_36")
                  ? true
                  : hasVariant(variants, "shape", "iconOnly")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"contentContainer"}
                  data-plasmic-override={overrides.contentContainer}
                  className={classNames(projectcss.all, sty.contentContainer, {
                    [sty.contentContainercolor_transparent]: hasVariant(
                      variants,
                      "color",
                      "transparent"
                    ),
                    [sty.contentContainerisDisabled]: hasVariant(
                      variants,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.contentContainershape__36]: hasVariant(
                      variants,
                      "shape",
                      "_36"
                    ),
                    [sty.contentContainershape_iconOnly]: hasVariant(
                      variants,
                      "shape",
                      "iconOnly"
                    ),
                    [sty.contentContainershape_short]: hasVariant(
                      variants,
                      "shape",
                      "short"
                    ),
                    [sty.contentContainershowEndIcon]: hasVariant(
                      variants,
                      "showEndIcon",
                      "showEndIcon"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Button",
                    value: args.children,
                    className: classNames(sty.slotTargetChildren, {
                      [sty.slotTargetChildrencolor_dark]: hasVariant(
                        variants,
                        "color",
                        "dark"
                      ),
                      [sty.slotTargetChildrencolor_highContrast]: hasVariant(
                        variants,
                        "color",
                        "highContrast"
                      ),
                      [sty.slotTargetChildrenisDisabled]: hasVariant(
                        variants,
                        "isDisabled",
                        "isDisabled"
                      ),
                      [sty.slotTargetChildrenshape__36]: hasVariant(
                        variants,
                        "shape",
                        "_36"
                      ),
                      [sty.slotTargetChildrenshape_short]: hasVariant(
                        variants,
                        "shape",
                        "short"
                      ),
                      [sty.slotTargetChildrenshape_vertical]: hasVariant(
                        variants,
                        "shape",
                        "vertical"
                      ),
                      [sty.slotTargetChildrenshowEndIcon]: hasVariant(
                        variants,
                        "showEndIcon",
                        "showEndIcon"
                      ),
                      [sty.slotTargetChildrenshowStartIcon]: hasVariant(
                        variants,
                        "showStartIcon",
                        "showStartIcon"
                      )
                    })
                  })}
                </div>
              ) : null}
              {(
                hasVariant(variants, "showEndIcon", "showEndIcon")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"endIconContainer"}
                  data-plasmic-override={overrides.endIconContainer}
                  className={classNames(projectcss.all, sty.endIconContainer, {
                    [sty.endIconContainercolor_highContrast]: hasVariant(
                      variants,
                      "color",
                      "highContrast"
                    ),
                    [sty.endIconContainershowEndIcon]: hasVariant(
                      variants,
                      "showEndIcon",
                      "showEndIcon"
                    )
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__hnFbS)}
                        role={"img"}
                      />
                    ),

                    value: args.endIcon,
                    className: classNames(sty.slotTargetEndIcon, {
                      [sty.slotTargetEndIconcolor_highContrast]: hasVariant(
                        variants,
                        "color",
                        "highContrast"
                      ),
                      [sty.slotTargetEndIconshowEndIcon]: hasVariant(
                        variants,
                        "showEndIcon",
                        "showEndIcon"
                      )
                    })
                  })}
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>
        ) : null}
        {(
          hasVariant(variants, "navigation", "unnamedVariant") ? true : false
        ) ? (
          <div
            data-plasmic-name={"alwaysOn"}
            data-plasmic-override={overrides.alwaysOn}
            className={classNames(projectcss.all, sty.alwaysOn, {
              [sty.alwaysOnnavigation_unnamedVariant]: hasVariant(
                variants,
                "navigation",
                "unnamedVariant"
              )
            })}
          >
            <div
              data-plasmic-name={"rectangle20"}
              data-plasmic-override={overrides.rectangle20}
              className={classNames(projectcss.all, sty.rectangle20)}
            />

            {(
              hasVariant(variants, "navigation", "unnamedVariant") ? true : true
            ) ? (
              <IconArrow2Icon
                className={classNames(projectcss.all, sty.svg__bgMjz, {
                  [sty.svgnavigation_unnamedVariant__bgMjzAcwX]: hasVariant(
                    variants,
                    "navigation",
                    "unnamedVariant"
                  )
                })}
                role={"img"}
              />
            ) : null}

            <div
              data-plasmic-name={"alwaysOn48X48"}
              data-plasmic-override={overrides.alwaysOn48X48}
              className={classNames(projectcss.all, sty.alwaysOn48X48)}
            >
              <div
                data-plasmic-name={"rectangle4486"}
                data-plasmic-override={overrides.rectangle4486}
                className={classNames(projectcss.all, sty.rectangle4486)}
              />

              {(
                hasVariant(variants, "navigation", "unnamedVariant")
                  ? true
                  : true
              ) ? (
                <AlwaysOnIcon
                  className={classNames(projectcss.all, sty.svg__iZOj5, {
                    [sty.svgnavigation_unnamedVariant__iZOj5AcwX]: hasVariant(
                      variants,
                      "navigation",
                      "unnamedVariant"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>

            <div
              data-plasmic-name={"yekst"}
              data-plasmic-override={overrides.yekst}
              className={classNames(projectcss.all, sty.yekst)}
            >
              <div
                data-plasmic-name={"loremIpsum"}
                data-plasmic-override={overrides.loremIpsum}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.loremIpsum
                )}
              >
                {"Stałe zasilanie"}
              </div>
            </div>
          </div>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicBtn>(
    PlasmicBtn,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },

    ref
  );

  return b;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "frame3947",
    "startIconContainer",
    "contentContainer",
    "endIconContainer",
    "alwaysOn",
    "rectangle20",
    "alwaysOn48X48",
    "rectangle4486",
    "yekst",
    "loremIpsum"
  ],
  freeBox: [
    "freeBox",
    "frame3947",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],
  frame3947: [
    "frame3947",
    "startIconContainer",
    "contentContainer",
    "endIconContainer"
  ],
  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer"],
  endIconContainer: ["endIconContainer"],
  alwaysOn: [
    "alwaysOn",
    "rectangle20",
    "alwaysOn48X48",
    "rectangle4486",
    "yekst",
    "loremIpsum"
  ],
  rectangle20: ["rectangle20"],
  alwaysOn48X48: ["alwaysOn48X48", "rectangle4486"],
  rectangle4486: ["rectangle4486"],
  yekst: ["yekst", "loremIpsum"],
  loremIpsum: ["loremIpsum"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  freeBox: "div";
  frame3947: "div";
  startIconContainer: "div";
  contentContainer: "div";
  endIconContainer: "div";
  alwaysOn: "div";
  rectangle20: "div";
  alwaysOn48X48: "div";
  rectangle4486: "div";
  yekst: "div";
  loremIpsum: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBtn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBtn__VariantsArgs;
    args?: PlasmicBtn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBtn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBtn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBtn__ArgProps,
          internalVariantPropNames: PlasmicBtn__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBtn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBtn";
  } else {
    func.displayName = `PlasmicBtn.${nodeName}`;
  }
  return func;
}

export const PlasmicBtn = Object.assign(
  // Top-level PlasmicBtn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    frame3947: makeNodeComponent("frame3947"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),
    alwaysOn: makeNodeComponent("alwaysOn"),
    rectangle20: makeNodeComponent("rectangle20"),
    alwaysOn48X48: makeNodeComponent("alwaysOn48X48"),
    rectangle4486: makeNodeComponent("rectangle4486"),
    yekst: makeNodeComponent("yekst"),
    loremIpsum: makeNodeComponent("loremIpsum"),

    // Metadata about props expected for PlasmicBtn
    internalVariantProps: PlasmicBtn__VariantProps,
    internalArgProps: PlasmicBtn__ArgProps,

    useBehavior
  }
);

export default PlasmicBtn;
/* prettier-ignore-end */
